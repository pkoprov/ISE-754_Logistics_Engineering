HW5
Question 1.b)
Locations of the new facilities are at EF2 and EF3,and the total cost is 168.
c)
LP:                Optimal objective value is 50.000000.                                            

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 200.000000.                                                       
                   Relative gap is 15.92%.                                                         

Cut Generation:    Applied 6 implication cuts,                                                      
                   and 1 flow cover cut.                                                            
                   Lower bound is 168.000000.                                                       
                   Relative gap is 0.00%.                                                          


Optimal solution found.

Intlinprog stopped at the root node because the
<a href = "matlab: helpview('optim','milp_abs_gap','CSHelpWindow');">objective value is within a gap tolerance</a> of the optimal value,
options.AbsoluteGapTolerance = 0 (the default value). The intcon
variables are <a href = "matlab: helpview('optim','milp_integer_within_tolerance','CSHelpWindow');">integer within tolerance</a>,
options.IntegerTolerance = 1e-05 (the default value).

Locations of the new facilities are at EF1, EF2,and EF3, and the total cost is 168.
Question 2)

k =

   9.9348e+05

  Add: 26585030.576477
 Xchg: 25256561.449286
  Add: 25256561.449286
 Drop: 25241151.241858
 Xchg: 25134482.733538
  Add: 25134482.733538
 Drop: 25134482.733538
Final: 25134482.733538

nNF =

    11


TDC_new =

   1.4206e+07


TC_new =

   2.5134e+07


TDC_orig =

    15474204


TC_orig =

   2.7396e+07


ans =

   91.8056


ans =

   91.7451

NF at the site 4 should be constructed.
NF at the site 6 should be constructed.
NF at the site 7 should be constructed.
NF at the site 8 should be constructed.
EF in Cañon City should be closed.
EF in Lubbock should be closed.
EF in Niles should be closed.
EF in Palestine should be closed.
EF in Stillwater should be closed.
Question 3)
LP:                Optimal objective value is 14.000000.                                            


Optimal solution found.

Intlinprog stopped at the root node because the
<a href = "matlab: helpview('optim','milp_abs_gap','CSHelpWindow');">objective value is within a gap tolerance</a> of the optimal value,
options.AbsoluteGapTolerance = 0 (the default value). The
intcon variables are <a href = "matlab: helpview('optim','milp_integer_within_tolerance','CSHelpWindow');">integer within tolerance</a>,
options.IntegerTolerance = 1e-05 (the default value).

New transmitters should be installed at Apex, Asheville, Burlington, Fayetteville, Havelock, Indian Trail, Jacksonville, Kinston, Lumberton, Rocky Mount, Shelby, Statesville, Thomasville, Wilmington.
These transmitters will cover 86.62% of NC population.
Question 4)

x = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        Code5: [104×1 double]
           XY: [104×2 double]
           ST: {104×1 cell}
          Pop: [104×1 double]
        House: [104×1 double]
     LandArea: [104×1 double]
    WaterArea: [104×1 double]


mp = 

  <a href="matlab:helpPopup Milp" style="font-weight:bold">Milp</a> with properties:

    Model: [1×1 struct]


ans = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     name: 'UFL'
    sense: []
      obj: []
       lb: []
       ub: []
    ctype: []
        A: []
      lhs: []
      rhs: []


n =

   104


m =

   104


ans = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     name: 'UFL'
    sense: 'minimize'
      obj: [1×10920 double]
       lb: [1×10920 double]
       ub: [1×10920 double]
    ctype…'
        A: [312×10920 double]
      lhs: [312×1 double]
      rhs: [312×1 double]

LP:                Optimal objective value is 7546.385340.                                          

Heuristics:        Found 2 solutions using ZI round.                                                
                   Upper bound is 40689.445122.                                                     
                   Relative gap is 68.44%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 37608.835368.                                                     
                   Relative gap is 65.86%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 34102.013840.                                                     
                   Relative gap is 62.35%.                                                         

Heuristics:        Found 2 solutions using ZI round.                                                
                   Upper bound is 29354.891140.                                                     
                   Relative gap is 56.26%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 24878.996644.                                                     
                   Relative gap is 48.39%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 24878.996644.                                                     
                   Relative gap is 48.39%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 20467.022899.                                                     
                   Relative gap is 37.27%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 17956.094931.                                                     
                   Relative gap is 28.50%.                                                         

Heuristics:        Found 1 solution using ZI round.                                                 
                   Upper bound is 17956.094931.                                                     
                   Relative gap is 28.50%.                                                         

Cut Generation:    Applied 477 implication cuts,                                                    
                   and 625 flow cover cuts.                                                         
                   Lower bound is 12839.119814.                                                     
                   Relative gap is 28.50%.                                                         

Heuristics:        Found 10 solutions using ZI round,                                               
                   and 1 solution using total rounding.                                             
                   Upper bound is 12880.443548.                                                     
                   Relative gap is 0.32%.                                                          

Cut Generation:    Applied 33 implication cuts,                                                     
                   and 9 flow cover cuts.                                                           
                   Lower bound is 12842.370528.                                                     
                   Relative gap is 0.30%.                                                          

Branch and Bound:

   nodes     total   num int        integer       relative                                          
explored  time (s)  solution           fval        gap (%)                                         
     175     18.01        22   1.288044e+04   0.000000e+00                                          

Optimal solution found.

Intlinprog stopped because the
<a href = "matlab: helpview('optim','milp_abs_gap','CSHelpWindow');">objective value is within a gap tolerance</a> of the optimal value,
options.AbsoluteGapTolerance = 0 (the default value). The
intcon variables are <a href = "matlab: helpview('optim','milp_integer_within_tolerance','CSHelpWindow');">integer within tolerance</a>,
options.IntegerTolerance = 1e-05 (the default value).


x = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    kn: [1×104 double]
     C: [104×104 double]

Number of facilities needed is 12.
Change in total cost is +6.43%.
diary off
